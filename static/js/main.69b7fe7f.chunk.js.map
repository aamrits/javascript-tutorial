{"version":3,"sources":["components/Home.js","components/Navbar/Navbar.js","components/js-concepts/JSQuestionsBasic.js","components/js-concepts/JSQuestionsAdvanced.js","components/js-concepts/DeepShallowCopy.js","components/NotFound.js","components/js-concepts/Example.js","components/js-concepts/Looping.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Fragment","className","Component","Navbar","id","onClick","this","props","toggleBtn","react_router_dom","to","JSQuestionsBasic","Prism","highlightAll","es","url","JSQuestionsAdvanced","DeepShallowCopy","NotFound","Example","Accordion","defaultActiveKey","Card","Toggle","as","Header","eventKey","Collapse","Body","Looping","src","App","document","querySelector","classList","toggle","components_Navbar_Navbar","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69b7fe7f.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Home Page</h1>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            This is the Home Page for my React Demo App. Check the sidebar to know all the functionality which I have done.\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './Navbar.css';\nimport { Link } from 'react-router-dom';\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"sidebar\">\n          <nav className=\"navbar navbar-expand-lg navbar-dark bg-light\">\n            <button className=\"close-btn\" onClick={ this.props.toggleBtn }><i className=\"fas fa-times\"></i></button>\n            <Link to=\"/\" className=\"navbar-brand\">Interview Q&As</Link>\n            <ul className=\"navbar-nav\">\n              <li className=\"nav-item\">\n                <Link to='/js-questions-basic'>Javascript Questions: Basics</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to='/js-questions-advanced'>Javascript Questions: Advanced</Link>\n              </li>                    \n            </ul>\n\n            <Link to=\"/\" className=\"navbar-brand\">Concepts</Link>\n            <ul className=\"navbar-nav\">            \n              <li className=\"nav-item\">\n                <Link to='/deep-shallow-copy'>Deep Copy & Shallow Copy</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to='/looping'>Looping in Objects and Array</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link to='/example'>Example</Link>\n              </li>\n            </ul>\n          </nav>\n          <footer>\n            <p>Copyright by Amrit &copy;2019</p>\n          </footer>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport Gist from 'super-react-gist';\n\nexport default class JSQuestionsBasic extends Component {\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Javascript Questions: Basics</h1>\n\n        <p>Some of the basic Javascript questions are listed below.</p>\n\n        <Gist url='https://gist.github.com/aamrits/bed4773f9589b6884a126c88891e2911' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport Gist from 'super-react-gist';\n\nexport default class JSQuestionsAdvanced extends Component {\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Javascript Questions: Advanced</h1>\n\n        <p>Some of the advanced Javascript questions (like ES6, OOPs related) are listed below.</p>\n\n        <Gist url='https://gist.github.com/aamrits/bc95009f01b59ba2ac789be856888737' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport Gist from 'super-react-gist';\n\nexport default class DeepShallowCopy extends Component {\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Deep Copy & Shallow Copy</h1>\n\n        <p>Deep copy and Shallow copy of an <strong>object</strong> is an important aspect of JavaScript and as a developer, it is useful to understand this concept.</p>\n        <p>Let’s declare an object.</p>\n        \n        <pre>\n          <code className=\"language-javascript\">\n          {`\n  let obj1 = {x: 2, y: 3}\n  obj2 = obj1;\n          `}\n          </code>\n        </pre>\n\n        <div className=\"alert-is-helpful\">\n          <p>Shallow Copy makes a copy of the reference to <strong>‘obj1’</strong> into <strong>‘obj2’</strong>. Think about it as a copy of <strong>obj1’</strong>s Address. So, the addresses of <strong>‘obj1’</strong> and <strong>‘obj2’</strong> will be the same i.e. they will be pointing to the same memory location.</p>\n        </div>\n\n        <pre>\n          <code className=\"language-javascript\">\n          {`\n  // Shallow Copy: The value of obj1 changes\n  obj2 = obj1;\n  obj2.x = 5;\n  console.log(obj1, obj2); // {x: 5, y: 3} {x: 5, y: 3}\n          `}\n          </code>\n        </pre>\n\n        <p>Here, the value of <strong>‘x’</strong> changes in both <strong>‘obj1’</strong> and <strong>‘obj2’</strong>.</p>\n\n        <div className=\"alert-is-helpful\">\n          <p>Deep copy makes a copy of all the members of <strong>‘obj1’</strong>, allocates different memory location for <strong>‘obj2’</strong> and then assigns the copied members to <strong>‘obj2’</strong> to achieve deep copy. In this way, if <strong>‘obj1’</strong> vanishes <strong>‘obj2’</strong> is still valid in the memory.</p>\n        </div>\n\n        <p>Method 1: We can use <strong>Object.assign()</strong> for deep copying.</p>\n\n        <pre>\n          <code className=\"language-javascript\">\n          {`\n  obj1 = {x: 5, y: 3}\n  // Deep Copy: The values of obj1 remains unchanged\n  // Method 1: Use Object.assign()\n  obj3 = Object.assign({}, obj1);\n  obj3.x = 56;\n  console.log(obj1, obj3); // {x: 5, y: 3} {x: 56, y: 3}\n          `}\n          </code>\n        </pre>\n\n        <p>Here, we can see that the values of <strong>‘obj1’</strong> don’t change. The value of <strong>‘obj3’</strong> changes.</p>\n\n        <p>Method 2: We can also use <strong>JSON.parse</strong> and <strong>JSON.stringify</strong> to achieve the same result.</p>\n\n        <pre>\n          <code className=\"language-javascript\">\n          {`\n  obj1 = {x: 5, y: 3}\n  // Deep Copy: The values of obj1 remains unchanged\n  // Method 2: Use JSON.parse(JSON.stringify())\n  obj4 = JSON.parse(JSON.stringify(obj1));\n  obj4.x = 10;\n  console.log(obj1, obj4); // {x: 5, y: 3} {x: 10, y: 3}\n          `}\n          </code>\n        </pre>\n\n        <p>To sum it up here is the entire code.</p>\n\n        <Gist url='https://gist.github.com/aamrits/16059d4b44a7c61513b3330d101803fc' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class NotFound extends Component {\n  render() {\n    return (\n      <div>\n        <React.Fragment>\n            <h1>Not Found</h1>\n        </React.Fragment>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport { Accordion, Card } from 'react-bootstrap';\n\nexport default class Example extends Component {\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Example</h1>\n\n        <p>Below is an example sample page.</p>\n\n        <Accordion defaultActiveKey=\"0\">\n          <Card className=\"card callout-is-helpful\">\n            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\n              Accordion\n            </Accordion.Toggle>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body className=\"card-body\">\n                This is an example of accordion.\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n\n        <div className=\"card callout-is-helpful\">\n          <div className=\"card-header\">\n            A block\n          </div>\n          <div className=\"card-body\">\n            This is an example of a block.\n          </div>\n        </div>\n\n        <div className=\"alert-is-helpful\">\n          <p>This is an example of an alert block.</p>\n        </div>\n\n        <pre>\n          <code className=\"language-javascript\">\n          {`\n  // This is a code block\n  obj2 = obj1;\n  obj2.x = 5;\n  console.log(obj1, obj2); // {x: 5, y: 3} {x: 5, y: 3}\n          `}\n          </code>\n        </pre>\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Prism from \"prismjs\";\nimport Gist from 'super-react-gist';\n\nexport default class Looping extends Component {\n  componentDidMount() {\n    Prism.highlightAll();\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <h1>Looping in Objects and Array</h1>\n\n        <p>In JavaScript frontend frameworks, working with APIs is a common thing. Often, we manipulate JSON objects and arrays. Hence, it becomes essential to know how to loop through an object or an array so that we can show the data accordingly.</p>\n\n        <p>In this blog, we will discuss looping in </p>\n        <ol>\n          <li>Arrays</li>\n          <li>Objects</li>\n          <li>Two-dimensional Arrays</li>\n        </ol>\n        \n        <h3>1. Looping through an Array</h3>\n\n        <p>Consider an array like this.</p>\n\n        <pre>\n          <code className=\"language-javascript\">\n          {`\n  let arr = ['virat kohli', 'sachin tendulkar', 'rohit sharma', 'dhoni'];\n          `}\n          </code>\n        </pre>\n\n        <p>We want to put this data in a tabular form in a table, named players. I am using ES6 to achieve this. The code looks something like this.</p>\n\n        <Gist url='https://gist.github.com/aamrits/601adacf6b2dcb960d05751aa8369763' />\n\n        <p>The output will look something like this.</p>\n\n        <img src=\"https://miro.medium.com/max/116/1*maizF-DddYb6fdaGWV_3CA.png\" className=\"img-fluid\" />\n\n        <h3>2. Looping through an object</h3>\n\n        <p>Consider an object like this.</p>\n\n        <pre>\n          <code className=\"language-javascript\">\n          {`\n  let obj = {        \n    'cricket': 'kohli',        \n    'tennis': 'federer',        \n    'football': 'messi'    \n  }\n          `}\n          </code>\n        </pre>\n\n        <p>Now we want to put it in a tabular form, where the key of the object will be under Sports column and value of the object will be in Players column. We can achieve this like this.</p>\n\n        <Gist url='https://gist.github.com/aamrits/945ae443793603487f26a60997ffade5' />\n\n        <p>Here, <strong>Object.keys()</strong> is used to fetch the keys of the <strong>‘obj’</strong> and then it stores as an array. The <strong>map()</strong> method loops through the array of keys and finds the <strong>values of the obj</strong> by <strong>obj[key].</strong></p>\n\n        <p>The output will look something like this.</p>\n\n        <img src=\"https://miro.medium.com/max/143/1*YNezl-LqrBWsAXxLQG0t0w.png\" className=\"img-fluid\" />\n\n        <h3>3. Looping through a two-dimensional array</h3>\n\n        <p>Let’s consider the following array.</p>\n\n        <pre>\n          <code className=\"language-javascript\">\n          {`\n  let arr2 = [        \n    ['cricket', 'kohli'],        \n    ['football', 'messi'],        \n    ['tennis', 'federer']    \n  ];\n          `}\n          </code>\n        </pre>\n\n        <p>We want to achieve the same table which we did in the previous one. We can do something like this.</p>\n\n        <Gist url='https://gist.github.com/aamrits/6077bc2cd3d3c74868929308929c2690' />\n\n        <p>The output table will look the same as in the previous one.</p>\n\n        <p>So, in this way, we can loop and arrange the data from an object or an array.</p>\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter, Route, Switch, Link } from 'react-router-dom';\nimport Home from './components/Home';\nimport Navbar from './components/Navbar/Navbar';\nimport JSQuestionsBasic from './components/js-concepts/JSQuestionsBasic';\nimport JSQuestionsAdvanced from './components/js-concepts/JSQuestionsAdvanced';\nimport DeepShallowCopy from './components/js-concepts/DeepShallowCopy';\nimport NotFound from './components/NotFound';\nimport Example from './components/js-concepts/Example';\nimport Looping from './components/js-concepts/Looping';\n\nclass App extends Component {\n  toggleBtn = () => {\n    document.querySelector('.wrapper').classList.toggle('active');\n  }\n  render() { \n    return (\n      <HashRouter>\n        <nav className=\"navbar navbar-light fixed-top navbar-header-styles\">\n          <Link to=\"/\" className=\"navbar-brand text-uppercase\">Javascript Tutorial</Link>\n          <div className=\"toggle-btn\" onClick={ this.toggleBtn }>\n            <span></span>\n            <span></span>\n            <span></span>\n          </div>\n        </nav> \n        \n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"wrapper active\">\n              <Navbar toggleBtn= { this.toggleBtn } /> \n            </div>\n            <div className=\"page-wrap\">\n              <div className=\"container-fluid\">\n                <div className=\"row\">\n                  <div className=\"col-12\">\n                  <Switch>\n                    <Route exact path=\"/\" component={ Home } />\n                    <Route path=\"/js-questions-basic\" component={ JSQuestionsBasic } />\n                    <Route path=\"/js-questions-advanced\" component={ JSQuestionsAdvanced } />\n                    <Route path=\"/deep-shallow-copy\" component={ DeepShallowCopy } />\n                    <Route path=\"/example\" component={ Example } />\n                    <Route path=\"/looping\" component={ Looping } />\n                    <Route path=\"*\" component={ NotFound } />\n                  </Switch>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'prismjs/themes/prism.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}